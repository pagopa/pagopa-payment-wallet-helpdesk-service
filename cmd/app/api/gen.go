// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Defines values for WalletApplicationStatus.
const (
	DISABLED WalletApplicationStatus = "DISABLED"
	ENABLED  WalletApplicationStatus = "ENABLED"
)

// Defines values for WalletStatus.
const (
	CREATED             WalletStatus = "CREATED"
	DELETED             WalletStatus = "DELETED"
	ERROR               WalletStatus = "ERROR"
	INITIALIZED         WalletStatus = "INITIALIZED"
	VALIDATED           WalletStatus = "VALIDATED"
	VALIDATIONREQUESTED WalletStatus = "VALIDATION_REQUESTED"
)

// Defines values for WalletType.
const (
	CARDS  WalletType = "CARDS"
	PAYPAL WalletType = "PAYPAL"
)

// HttpStatusCode The HTTP status code generated by the origin server for this occurrence
// of the problem.
type HttpStatusCode = int32

// ProblemJson Body definition for error responses containing failure details
type ProblemJson struct {
	// Detail A human readable explanation specific to this occurrence of the
	// problem.
	Detail *string `json:"detail,omitempty"`

	// Instance An absolute URI that identifies the specific occurrence of the problem.
	// It may or may not yield further information if dereferenced.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code generated by the origin server for this occurrence
	// of the problem.
	Status *HttpStatusCode `json:"status,omitempty"`

	// Title A short, summary of the problem type. Written in english and readable
	// for engineers (usually not suited for non technical stakeholders and
	// not localized); example: Service Unavailable
	Title *string `json:"title,omitempty"`

	// Type An absolute URI that identifies the problem type. When dereferenced,
	// it SHOULD provide human-readable documentation for the problem type
	// (e.g., using HTML).
	Type *string `json:"type,omitempty"`
}

// ServiceInfo Service information
type ServiceInfo struct {
	// Version The running service version
	Version string `json:"version"`
}

// WalletApplicationId id of the application associated to the wallet
type WalletApplicationId = string

// WalletApplicationInfo defines model for WalletApplicationInfo.
type WalletApplicationInfo struct {
	LastUsage *time.Time `json:"lastUsage,omitempty"`

	// Name id of the application associated to the wallet
	Name WalletApplicationId `json:"name"`

	// Status Enumeration of wallet statuses
	Status WalletApplicationStatus `json:"status"`
}

// WalletApplicationStatus Enumeration of wallet statuses
type WalletApplicationStatus string

// WalletDetail defines model for WalletDetail.
type WalletDetail struct {
	// Applications list of all applications for the wallet
	Applications []WalletApplicationInfo `json:"applications"`

	// Id wallet unique identifier
	Id string `json:"id"`

	// OnboardingChannel the channel from which wallet have been onboarded
	OnboardingChannel string `json:"onboardingChannel"`

	// Status wallet status
	Status string `json:"status"`

	// Type wallet type
	Type WalletType `json:"type"`
}

// WalletStatus Enumeration of wallet statuses
type WalletStatus string

// WalletType wallet type
type WalletType string

// WalletsDetails defines model for WalletsDetails.
type WalletsDetails struct {
	Wallets []WalletDetail `json:"wallets"`
}

// GetWalletsParams defines parameters for GetWallets.
type GetWalletsParams struct {
	// Status Filter searched wallet by status
	Status *WalletStatus `form:"status,omitempty" json:"status,omitempty"`

	// Type Filter searched wallet by type
	Type *WalletType `form:"type,omitempty" json:"type,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve wallets associated to an user id
	// (GET /helpdesk/wallets/{userId})
	GetWallets(c *gin.Context, userId string, params GetWalletsParams)

	// (GET /info)
	GetServiceInfo(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetWallets operation middleware
func (siw *ServerInterfaceWrapper) GetWallets(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWalletsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetWallets(c, userId, params)
}

// GetServiceInfo operation middleware
func (siw *ServerInterfaceWrapper) GetServiceInfo(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetServiceInfo(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/helpdesk/wallets/:userId", wrapper.GetWallets)
	router.GET(options.BaseURL+"/info", wrapper.GetServiceInfo)
}

type GetWalletsRequestObject struct {
	UserId string `json:"userId"`
	Params GetWalletsParams
}

type GetWalletsResponseObject interface {
	VisitGetWalletsResponse(w http.ResponseWriter) error
}

type GetWallets200JSONResponse WalletsDetails

func (response GetWallets200JSONResponse) VisitGetWalletsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWallets400JSONResponse ProblemJson

func (response GetWallets400JSONResponse) VisitGetWalletsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetWallets404JSONResponse ProblemJson

func (response GetWallets404JSONResponse) VisitGetWalletsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWallets500JSONResponse ProblemJson

func (response GetWallets500JSONResponse) VisitGetWalletsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceInfoRequestObject struct {
}

type GetServiceInfoResponseObject interface {
	VisitGetServiceInfoResponse(w http.ResponseWriter) error
}

type GetServiceInfo200JSONResponse ServiceInfo

func (response GetServiceInfo200JSONResponse) VisitGetServiceInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve wallets associated to an user id
	// (GET /helpdesk/wallets/{userId})
	GetWallets(ctx context.Context, request GetWalletsRequestObject) (GetWalletsResponseObject, error)

	// (GET /info)
	GetServiceInfo(ctx context.Context, request GetServiceInfoRequestObject) (GetServiceInfoResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetWallets operation middleware
func (sh *strictHandler) GetWallets(ctx *gin.Context, userId string, params GetWalletsParams) {
	var request GetWalletsRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWallets(ctx, request.(GetWalletsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWallets")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetWalletsResponseObject); ok {
		if err := validResponse.VisitGetWalletsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceInfo operation middleware
func (sh *strictHandler) GetServiceInfo(ctx *gin.Context) {
	var request GetServiceInfoRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceInfo(ctx, request.(GetServiceInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetServiceInfoResponseObject); ok {
		if err := validResponse.VisitGetServiceInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
